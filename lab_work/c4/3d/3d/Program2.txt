using SFML.Graphics;
using SFML.System;
using SFML.Window;
using System;
using System.Collections.Generic;

class Program
{
    static uint canvasWidth = 800;
    static uint canvasHeight = 800;
    static int gridSize = 40;
    static float squeeze = 0.2f; // Сжатие по горизонтали
    static Random rand = new Random();

    static void Main()
    {
        RenderWindow window = new RenderWindow(new VideoMode(canvasWidth, canvasHeight), "Triangle Grid SFML");
        window.Closed += (_, __) => window.Close();

        // Создаем список треугольников
        List<VertexArray> triangles = GenerateTriangles();

        while (window.IsOpen)
        {
            window.DispatchEvents();
            window.Clear(Color.White);

            // Отрисовываем все треугольники
            foreach (var tri in triangles)
                window.Draw(tri);

            window.Display();
        }
    }

    static List<VertexArray> GenerateTriangles()
    {
        List<VertexArray> triangleList = new List<VertexArray>();

        float stepX = gridSize * 0.865f; // Приблизительно cos(30°) для гекс-сетки
        float stepY = gridSize * 0.5f;

        for (float x = 0; x < canvasWidth + gridSize; x += stepX)
        {
            for (float y = 0; y < canvasHeight + gridSize; y += gridSize)
            {
                // Смещение рядов через строку
                float offsetX = ((int)(y / gridSize) % 2 == 0) ? 0 : stepX / 2;

                // Центр треугольника
                float cx = x + offsetX;
                float cy = y;

                // Генерация случайного угла поворота
                float angle = rand.Next(0, 360) * (float)Math.PI / 180f;

                // Создаем и добавляем треугольник
                triangleList.Add(CreateTriangle(cx, cy, gridSize, squeeze, angle));
            }
        }

        return triangleList;
    }

    static VertexArray CreateTriangle(float centerX, float centerY, float size, float squeeze, float angle)
    {
        VertexArray triangle = new VertexArray(PrimitiveType.Triangles, 3);

        for (int i = 0; i < 3; i++)
        {
            float a = i * 2 * (float)Math.PI / 3 + angle; // 120° между вершинами
            float x = (float)(Math.Cos(a) * size * squeeze);
            float y = (float)(Math.Sin(a) * size);

            triangle[(uint)i] = new Vertex(
                new Vector2f(centerX + x, centerY + y),
                RandomColor()
            );
        }

        return triangle;
    }

    static Color RandomColor()
    {
        // Можно задать палитру, но пока просто случайный цвет
        return new Color(
            (byte)rand.Next(100, 255),
            (byte)rand.Next(100, 255),
            (byte)rand.Next(100, 255)
        );
    }
}
