using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using SFML.Graphics;
using SFML.System;
using SFML.Window;

namespace CSharp3DEngine
{
    public class Vec3
    {
        public float X, Y, Z, W;

        public Vec3() : this(0, 0, 0) { }

        public Vec3(float x, float y, float z)
        {
            X = x;
            Y = y;
            Z = z;
            W = 1;
        }

        public static Vec3 operator +(Vec3 v1, Vec3 v2) => new Vec3(v1.X + v2.X, v1.Y + v2.Y, v1.Z + v2.Z);
        public static Vec3 operator -(Vec3 v1, Vec3 v2) => new Vec3(v1.X - v2.X, v1.Y - v2.Y, v1.Z - v2.Z);
        public static Vec3 operator *(Vec3 v, float f) => new Vec3(v.X * f, v.Y * f, v.Z * f);
        public static Vec3 operator /(Vec3 v, float f) => new Vec3(v.X / f, v.Y / f, v.Z / f);
        public static Vec3 operator -(Vec3 v) => v * -1;

        public void Normalize()
        {
            float len = Length();
            X /= len;
            Y /= len;
            Z /= len;
        }

        public float Length() => (float)Math.Sqrt(X * X + Y * Y + Z * Z);

        public static float Dot(Vec3 v1, Vec3 v2) => v1.X * v2.X + v1.Y * v2.Y + v1.Z * v2.Z;

        public static Vec3 Cross(Vec3 a, Vec3 b) => 
            new Vec3(a.Y * b.Z - a.Z * b.Y, a.Z * b.X - a.X * b.Z, a.X * b.Y - a.Y * b.X);
    }

    public class Mat4x4
    {
        public float[,] M = new float[4, 4];

        public Mat4x4() { }

        public static Mat4x4 GetProjectionMatrix(int width = 1920, int height = 1080, 
            float near = 0.1f, float far = 1000, float fov = 90)
        {
            float aspectRatio = (float)height / width;
            float fovRad = 1.0f / (float)Math.Tan(fov * 0.5f / 180.0f * Math.PI);

            return new Mat4x4
            {
                M = new float[4, 4]
                {
                    { aspectRatio * fovRad, 0, 0, 0 },
                    { 0, fovRad, 0, 0 },
                    { 0, 0, far / (far - near), 1 },
                    { 0, 0, -far * near / (far - near), 0 }
                }
            };
        }

        public static Mat4x4 GetRotationX(float angle)
        {
            var matrix = new Mat4x4();
            matrix.M[0, 0] = 1.0f;
            matrix.M[1, 1] = (float)Math.Cos(angle);
            matrix.M[1, 2] = (float)Math.Sin(angle);
            matrix.M[2, 1] = -(float)Math.Sin(angle);
            matrix.M[2, 2] = (float)Math.Cos(angle);
            matrix.M[3, 3] = 1.0f;
            return matrix;
        }

        public static Mat4x4 GetRotationY(float angle)
        {
            var matrix = new Mat4x4();
            matrix.M[0, 0] = (float)Math.Cos(angle);
            matrix.M[0, 2] = (float)Math.Sin(angle);
            matrix.M[2, 0] = -(float)Math.Sin(angle);
            matrix.M[1, 1] = 1.0f;
            matrix.M[2, 2] = (float)Math.Cos(angle);
            matrix.M[3, 3] = 1.0f;
            return matrix;
        }

        public static Mat4x4 GetRotationZ(float angle)
        {
            var matrix = new Mat4x4();
            matrix.M[0, 0] = (float)Math.Cos(angle);
            matrix.M[0, 1] = (float)Math.Sin(angle);
            matrix.M[1, 0] = -(float)Math.Sin(angle);
            matrix.M[1, 1] = (float)Math.Cos(angle);
            matrix.M[2, 2] = 1.0f;
            matrix.M[3, 3] = 1.0f;
            return matrix;
        }

        public static Mat4x4 GetPointAtMatrix(Vec3 pos, Vec3 target, Vec3 up)
        {
            Vec3 newForward = target - pos;
            newForward.Normalize();

            Vec3 a = newForward * Vec3.Dot(up, newForward);
            Vec3 newUp = up - a;
            newUp.Normalize();

            Vec3 newRight = Vec3.Cross(newUp, newForward);

            var matrix = new Mat4x4();
            matrix.M[0, 0] = newRight.X; matrix.M[0, 1] = newRight.Y; matrix.M[0, 2] = newRight.Z; matrix.M[0, 3] = 0.0f;
            matrix.M[1, 0] = newUp.X;     matrix.M[1, 1] = newUp.Y;     matrix.M[1, 2] = newUp.Z;     matrix.M[1, 3] = 0.0f;
            matrix.M[2, 0] = newForward.X;matrix.M[2, 1] = newForward.Y;matrix.M[2, 2] = newForward.Z;matrix.M[2, 3] = 0.0f;
            matrix.M[3, 0] = pos.X;       matrix.M[3, 1] = pos.Y;       matrix.M[3, 2] = pos.Z;       matrix.M[3, 3] = 1.0f;
            return matrix;
        }

        public void Invert()
        {
            var matrix = new Mat4x4();
            matrix.M[0, 0] = M[0, 0]; matrix.M[0, 1] = M[1, 0]; matrix.M[0, 2] = M[2, 0]; matrix.M[0, 3] = 0.0f;
            matrix.M[1, 0] = M[0, 1]; matrix.M[1, 1] = M[1, 1]; matrix.M[1, 2] = M[2, 1]; matrix.M[1, 3] = 0.0f;
            matrix.M[2, 0] = M[0, 2]; matrix.M[2, 1] = M[1, 2]; matrix.M[2, 2] = M[2, 2]; matrix.M[2, 3] = 0.0f;
            matrix.M[3, 0] = -(M[3, 0] * matrix.M[0, 0] + M[3, 1] * matrix.M[1, 0] + M[3, 2] * matrix.M[2, 0]);
            matrix.M[3, 1] = -(M[3, 0] * matrix.M[0, 1] + M[3, 1] * matrix.M[1, 1] + M[3, 2] * matrix.M[2, 1]);
            matrix.M[3, 2] = -(M[3, 0] * matrix.M[0, 2] + M[3, 1] * matrix.M[1, 2] + M[3, 2] * matrix.M[2, 2]);
            matrix.M[3, 3] = 1.0f;
            M = matrix.M;
        }

        public static Vec3 operator *(Vec3 i, Mat4x4 m)
        {
            Vec3 v = new Vec3();
            v.X = i.X * m.M[0, 0] + i.Y * m.M[1, 0] + i.Z * m.M[2, 0] + i.W * m.M[3, 0];
            v.Y = i.X * m.M[0, 1] + i.Y * m.M[1, 1] + i.Z * m.M[2, 1] + i.W * m.M[3, 1];
            v.Z = i.X * m.M[0, 2] + i.Y * m.M[1, 2] + i.Z * m.M[2, 2] + i.W * m.M[3, 2];
            v.W = i.X * m.M[0, 3] + i.Y * m.M[1, 3] + i.Z * m.M[2, 3] + i.W * m.M[3, 3];
            if (v.W != 0) { v.X /= v.W; v.Y /= v.W; v.Z /= v.W; }
            return v;
        }
    }

    public class Triangle
    {
        public Vec3[] Points = new Vec3[3];
        public Vec3 Normal;

        public Triangle() 
        {
            Points = new Vec3[3] { new Vec3(), new Vec3(), new Vec3() };
        }

        public Triangle(Vec3 p1, Vec3 p2, Vec3 p3)
        {
            Points = new Vec3[3] { p1, p2, p3 };
            Normal = Vec3.Cross(p2 - p1, p3 - p1);
            Normal.Normalize();
        }

        public List<Triangle> ClipAgainstPlane(Vec3 planePoint, Vec3 planeNormal)
        {
            planeNormal.Normalize();

            float Dist(Vec3 p) => Vec3.Dot(planeNormal, p) - Vec3.Dot(planeNormal, planePoint);

            Vec3[] inside = new Vec3[3]; int insideCount = 0;
            Vec3[] outside = new Vec3[3]; int outsideCount = 0;

            for (int i = 0; i < 3; i++)
            {
                if (Dist(Points[i]) >= 0)
                    inside[insideCount++] = Points[i];
                else
                    outside[outsideCount++] = Points[i];
            }

            if (insideCount == 0) return new List<Triangle>();
            if (insideCount == 3) return new List<Triangle> { this };

            if (insideCount == 1 && outsideCount == 2)
            {
                var outTri = new Triangle();
                outTri.Points[0] = inside[0];

                float t;
                outTri.Points[1] = IntersectPlane(planePoint, planeNormal, inside[0], outside[0], out t);
                outTri.Points[2] = IntersectPlane(planePoint, planeNormal, inside[0], outside[1], out t);

                outTri.Normal = Normal;
                return new List<Triangle> { outTri };
            }

            if (insideCount == 2 && outsideCount == 1)
            {
                var outTri1 = new Triangle();
                var outTri2 = new Triangle();
                float t;

                outTri1.Points[0] = inside[0];
                outTri1.Points[1] = inside[1];
                outTri1.Points[2] = IntersectPlane(planePoint, planeNormal, inside[0], outside[0], out t);
                outTri1.Normal = Normal;

                outTri2.Points[0] = inside[1];
                outTri2.Points[1] = outTri1.Points[2];
                outTri2.Points[2] = IntersectPlane(planePoint, planeNormal, inside[1], outside[0], out t);
                outTri2.Normal = Normal;

                return new List<Triangle> { outTri1, outTri2 };
            }

            return new List<Triangle>();
        }

        private Vec3 IntersectPlane(Vec3 planePoint, Vec3 planeNormal, Vec3 lineStart, Vec3 lineEnd, out float t)
        {
            planeNormal.Normalize();
            float planeD = -Vec3.Dot(planeNormal, planePoint);
            float ad = Vec3.Dot(lineStart, planeNormal);
            float bd = Vec3.Dot(lineEnd, planeNormal);
            t = (-planeD - ad) / (bd - ad);
            Vec3 lineToIntersect = (lineEnd - lineStart) * t;
            return lineStart + lineToIntersect;
        }
    }

    public class Mesh
    {
        public List<Triangle> Triangles = new List<Triangle>();

        public bool LoadFromFile(string fileName)
        {
            try
            {
                var lines = File.ReadAllLines(fileName);
                var verts = new List<Vec3>();

                foreach (var line in lines)
                {
                    if (line.StartsWith("v "))
                    {
                        var parts = line.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
                        var v = new Vec3(float.Parse(parts[1]), float.Parse(parts[2]), float.Parse(parts[3]));
                        verts.Add(v);
                    }
                    else if (line.StartsWith("f "))
                    {
                        var parts = line.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
                        
                        if (parts[1].Contains('/'))
                        {
                            // Handle format with texture/normal indices
                            var indices = parts.Skip(1).Select(p => int.Parse(p.Split('/')[0])).ToArray();
                            Triangles.Add(new Triangle(verts[indices[0] - 1], verts[indices[1] - 1], verts[indices[2] - 1]));
                        }
                        else
                        {
                            // Simple vertex indices
                            var indices = parts.Skip(1).Select(int.Parse).ToArray();
                            Triangles.Add(new Triangle(verts[indices[0] - 1], verts[indices[1] - 1], verts[indices[2] - 1]));
                        }
                    }
                }
                return true;
            }
            catch
            {
                return false;
            }
        }

        public void DefineAsCube()
        {
            Triangles = new List<Triangle>
            {
                // SOUTH
                new Triangle(new Vec3(0.0f, 0.0f, 0.0f), new Vec3(0.0f, 1.0f, 0.0f), new Vec3(1.0f, 1.0f, 0.0f)),
                new Triangle(new Vec3(0.0f, 0.0f, 0.0f), new Vec3(1.0f, 1.0f, 0.0f), new Vec3(1.0f, 0.0f, 0.0f)),
                // EAST
                new Triangle(new Vec3(1.0f, 0.0f, 0.0f), new Vec3(1.0f, 1.0f, 0.0f), new Vec3(1.0f, 1.0f, 1.0f)),
                new Triangle(new Vec3(1.0f, 0.0f, 0.0f), new Vec3(1.0f, 1.0f, 1.0f), new Vec3(1.0f, 0.0f, 1.0f)),
                // NORTH
                new Triangle(new Vec3(1.0f, 0.0f, 1.0f), new Vec3(1.0f, 1.0f, 1.0f), new Vec3(0.0f, 1.0f, 1.0f)),
                new Triangle(new Vec3(1.0f, 0.0f, 1.0f), new Vec3(0.0f, 1.0f, 1.0f), new Vec3(0.0f, 0.0f, 1.0f)),
                // WEST
                new Triangle(new Vec3(0.0f, 0.0f, 1.0f), new Vec3(0.0f, 1.0f, 1.0f), new Vec3(0.0f, 1.0f, 0.0f)),
                new Triangle(new Vec3(0.0f, 0.0f, 1.0f), new Vec3(0.0f, 1.0f, 0.0f), new Vec3(0.0f, 0.0f, 0.0f)),
                // TOP
                new Triangle(new Vec3(0.0f, 1.0f, 0.0f), new Vec3(0.0f, 1.0f, 1.0f), new Vec3(1.0f, 1.0f, 1.0f)),
                new Triangle(new Vec3(0.0f, 1.0f, 0.0f), new Vec3(1.0f, 1.0f, 1.0f), new Vec3(1.0f, 1.0f, 0.0f)),
                // BOTTOM
                new Triangle(new Vec3(1.0f, 0.0f, 1.0f), new Vec3(0.0f, 0.0f, 1.0f), new Vec3(0.0f, 0.0f, 0.0f)),
                new Triangle(new Vec3(1.0f, 0.0f, 1.0f), new Vec3(0.0f, 0.0f, 0.0f), new Vec3(1.0f, 0.0f, 0.0f))
            };
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            Vec3 cameraLoc = new Vec3(0, -2.0f, -5);
            Mat4x4 projMat = Mat4x4.GetProjectionMatrix(1920, 1080, 0.1f, 1000, 90);

            Mesh testMesh = new Mesh();
            if (!testMesh.LoadFromFile("cube.obj")) return;

            float theta = 0;

            bool outlineOnly = false;
            bool allowMouseMovement = false;
            bool allowRotation = true;

            bool[] keys = new bool[6];

            Vec3 lookDir = new Vec3(0, 0, 1);
            Vec3 upDir = new Vec3(0, 1, 0);

            Vec3 lightDir = new Vec3(1, -0.5f, -0.7f);
            lightDir.Normalize();

            Clock clockForMovement = new Clock();
            Clock clockForFPS = new Clock();

            const int WINDOW_HEIGHT = 1080;
            const int WINDOW_WIDTH = 1920;

            Vector2i mouseOffset = new Vector2i();

            RenderWindow window = new RenderWindow(new VideoMode((uint)WINDOW_WIDTH, (uint)WINDOW_HEIGHT), "3D Engine");
            window.SetVerticalSyncEnabled(true);
            Mouse.SetPosition(new Vector2i(WINDOW_WIDTH / 2, WINDOW_HEIGHT / 2), window);
            window.SetMouseCursorVisible(false);
            allowMouseMovement = true;

            window.Closed += (sender, e) => window.Close();
            window.KeyPressed += (sender, e) =>
            {
                if (e.Code == Keyboard.Key.Escape) window.Close();
                if (e.Code == Keyboard.Key.W) keys[0] = true;
                if (e.Code == Keyboard.Key.A) keys[1] = true;
                if (e.Code == Keyboard.Key.S) keys[2] = true;
                if (e.Code == Keyboard.Key.D) keys[3] = true;
                if (e.Code == Keyboard.Key.Space) keys[4] = true;
                if (e.Code == Keyboard.Key.LShift) keys[5] = true;
                if (e.Code == Keyboard.Key.Tab) outlineOnly = !outlineOnly;
                if (e.Code == Keyboard.Key.LControl) allowMouseMovement = !allowMouseMovement;
                if (e.Code == Keyboard.Key.R) allowRotation = !allowRotation;
            };

            window.KeyReleased += (sender, e) =>
            {
                if (e.Code == Keyboard.Key.W) keys[0] = false;
                if (e.Code == Keyboard.Key.A) keys[1] = false;
                if (e.Code == Keyboard.Key.S) keys[2] = false;
                if (e.Code == Keyboard.Key.D) keys[3] = false;
                if (e.Code == Keyboard.Key.Space) keys[4] = false;
                if (e.Code == Keyboard.Key.LShift) keys[5] = false;
            };

            window.MouseMoved += (sender, e) =>
            {
                if (allowMouseMovement)
                {
                    mouseOffset.X = (int)e.X - WINDOW_WIDTH / 2;
                    mouseOffset.Y = (int)e.Y - WINDOW_HEIGHT / 2;
                    Mouse.SetPosition(new Vector2i(WINDOW_WIDTH / 2, WINDOW_HEIGHT / 2), window);
                }
            };

            while (window.IsOpen)
            {
                window.DispatchEvents();

                if (clockForMovement.ElapsedTime.AsMilliseconds() >= 10)
                {
                    Vec3 vel = new Vec3(0, 0, 0);
                    if (keys[0]) vel += new Vec3(0, 0, 0.1f);
                    if (keys[1]) vel += new Vec3(-0.1f, 0, 0);
                    if (keys[2]) vel += new Vec3(0, 0, -0.1f);
                    if (keys[3]) vel += new Vec3(0.1f, 0, 0);
                    if (keys[4]) vel += new Vec3(0, -0.1f, 0);
                    if (keys[5]) vel += new Vec3(0, 0.1f, 0);

                    Vec3 tempDir_ = new Vec3(lookDir.X, 0, lookDir.Z);
                    tempDir_.Normalize();
                    float phi_ = (float)Math.Acos(Vec3.Dot(tempDir_, new Vec3(0, 0, 1)));
                    phi_ = tempDir_.X < 0 ? phi_ : -phi_;
                    Vec3 rotVel = vel * Mat4x4.GetRotationY(phi_);
                    cameraLoc += rotVel;
                    clockForMovement.Restart();
                }

                lookDir = lookDir * Mat4x4.GetRotationY(-mouseOffset.X * 0.005f);
                Vec3 horDir = new Vec3(lookDir.X, 0, lookDir.Z);
                horDir.Normalize();
                float phi = (float)Math.Acos(Vec3.Dot(horDir, new Vec3(0, 0, 1)));
                phi = horDir.X < 0 ? -phi : phi;
                Vec3 tempDir = lookDir * Mat4x4.GetRotationY(phi);
                tempDir = tempDir * Mat4x4.GetRotationX(-mouseOffset.Y * 0.005f);
                lookDir = tempDir * Mat4x4.GetRotationY(-phi);
                lookDir.Normalize();
                Vec3 target = cameraLoc + lookDir;
                mouseOffset = new Vector2i(0, 0);
                Mat4x4 viewMat = Mat4x4.GetPointAtMatrix(cameraLoc, target, upDir);
                viewMat.Invert();

                window.Clear(Color.White);

                List<Triangle> toDraw = new List<Triangle>();
                foreach (var t in testMesh.Triangles)
                {
                    Triangle newTri = new Triangle();
                    for (int k = 0; k < 3; k++)
                    {
                        newTri.Points[k] = t.Points[k] * Mat4x4.GetRotationY(theta * 1.5f);
                        newTri.Points[k] = newTri.Points[k] * Mat4x4.GetRotationZ(3.1415f);
                    }

                    newTri.Normal = Vec3.Cross(newTri.Points[2] - newTri.Points[0], newTri.Points[1] - newTri.Points[0]);
                    newTri.Normal.Normalize();

                    Vec3 camDir = (newTri.Points[0] + newTri.Points[1] + newTri.Points[2]) / 3 - cameraLoc;
                    if (Vec3.Dot(newTri.Normal, camDir) < 0)
                        continue;

                    for (int k = 0; k < 3; k++)
                    {
                        newTri.Points[k] = newTri.Points[k] * viewMat;
                    }

                    List<Triangle> clipped = newTri.ClipAgainstPlane(new Vec3(0, 0, 0.2f), new Vec3(0, 0, 1));
                    for (int n = 0; n < clipped.Count; n++)
                    {
                        for (int m = 0; m < 3; m++)
                        {
                            clipped[n].Points[m] = clipped[n].Points[m] * projMat;
                        }
                    }

                    List<Triangle> Q = clipped;
                    for (int x = 0; x < 4; x++)
                    {
                        List<Triangle> temp = new List<Triangle>();
                        for (int y = 0; y < Q.Count; y++)
                        {
                            Triangle tri = Q[y];
                            List<Triangle> newT = new List<Triangle>();
                            switch (x)
                            {
                                case 0: newT = tri.ClipAgainstPlane(new Vec3(0, -1, 0), new Vec3(0, 1, 0)); break; // TOP
                                case 1: newT = tri.ClipAgainstPlane(new Vec3(0, 1, 0), new Vec3(0, -1, 0)); break; // BOTTOM
                                case 2: newT = tri.ClipAgainstPlane(new Vec3(-1, 0, 0), new Vec3(1, 0, 0)); break; // LEFT
                                case 3: newT = tri.ClipAgainstPlane(new Vec3(1, 0, 0), new Vec3(-1, 0, 0)); break; // RIGHT
                            }
                            temp.AddRange(newT);
                        }
                        Q = temp;
                    }
                    toDraw.AddRange(Q);
                }

                toDraw.Sort((t1, t2) =>
                {
                    float z1 = (t1.Points[0].Z + t1.Points[1].Z + t1.Points[2].Z) / 3.0f;
                    float z2 = (t2.Points[0].Z + t2.Points[1].Z + t2.Points[2].Z) / 3.0f;
                    return z2.CompareTo(z1);
                });

                foreach (var T in toDraw)
                {
                    if (outlineOnly)
                    {
                        VertexArray outline = new VertexArray(PrimitiveType.LineStrip, 4);

                        for (int j = 0; j < 4; j++)
                        {
                            float x = (T.Points[j % 3].X + 1) * window.Size.X / 2;
                            float y = (T.Points[j % 3].Y + 1) * window.Size.Y / 2;
                            outline[(uint)j] = new Vertex(new Vector2f(x, y), Color.Black);
                        }

                        window.Draw(outline);
                    }
                    else
                    {
                        VertexArray tri = new VertexArray(PrimitiveType.Triangles, 3);

                        for (int j = 0; j < 3; j++)
                        {
                            float x = (T.Points[j].X + 1) * window.Size.X / 2;
                            float y = (T.Points[j].Y + 1) * window.Size.Y / 2;
                            tri[(uint)j] = new Vertex(new Vector2f(x, y));
                            float light = Math.Max(0.0f, Vec3.Dot(-T.Normal, lightDir));
                            byte R = (byte)(153 * (0.3f + 0.7f * light));
                            byte G = (byte)(249 * (0.3f + 0.7f * light));
                            byte B = (byte)(142 * (0.3f + 0.7f * light));
                            // tri[j].Color = new Color(R, G, B);
                        }

                        window.Draw(tri);
                    }
                }

                int FPS = (int)(1.0f / clockForFPS.ElapsedTime.AsSeconds());
                clockForFPS.Restart();
                string name = $"FPS: {FPS}; Triangles rendering: {testMesh.Triangles.Count}; Triangles drawing: {toDraw.Count} {cameraLoc}";
                window.SetTitle(name);
                theta += 0.01f * (allowRotation ? 1 : 0);
                window.Display();
            }
        }
    }
}